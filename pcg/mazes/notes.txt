Things to improve/do
    - create different starting location
    - take into account more functions/heuristics to quantify maze
        - width of walls
        - width of walking areas
        -  
    -  
    - construct maze from solution
    - maybe switch to heuristic solver (A*) to speed up tests
    - write novelty fitnesses

Problems with current implementation
    - maze could be half ones, half zeros split
    - crossover will likely make solvable mazes unsolvable
        - is GA even good for PCG?
    - i don't understand why complexity is high given low # of solvable mazes
        - maybe values solving higher?
    - i don't understand why fitness is so low given low # of solvable mazes
        - error in solvable code?
    - init Solvable for random is different?


Changes I've made
    - switched to binary encoding
    - played with normal fitness
    - played with crossover rate
    - start and end position are 0

representations of mazes
fitness values of mazes
    - keep unsolvable, but interesting mazes.
            - how close to solvable
                - could change crossover location/size
            - number of problems
    - NSGA-2 - multiobjective algo
    - multimodal GA - single obj - shared fitness - 
find papers

http://math.stackexchange.com/questions/488639/equation-for-finding-maze-solvability

Reading NSGA-II
    - what is dominated
    - explain pareto-front
